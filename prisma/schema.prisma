// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ThemeType {
  LIGHT
  DARK
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  theme         ThemeType @default(DARK) @map("theme")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  userTypeId    Int       @default(0)

  // foreign relations
  createdPastes Paste[]
  likedPastes   UserPasteLike[]

  @@map("users")
}

enum PasteVisibility {
  PUBLIC
  HIDDEN
  PRIVATE
}

enum PasteStatus {
  OK
  FROZEN
  HIDDEN
  SOFT_DELETED
}

model Paste {
  id             String          @id
  title          String?
  views          BigInt          @default(0)
  status         PasteStatus     @default(OK)
  visibility     PasteVisibility @default(PUBLIC)
  expirationDate DateTime?       @map("expiration_date")
  creatorAddr    String?         @map("creator_addr") @db.Inet
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  // relations
  creatorId     Int?    @map("creator_id")
  creator       User?   @relation(fields: [creatorId], references: [id])
  forkedPasteId String? @map("forked_paste_id")
  forkedPaste   Paste?  @relation("forked_pastes", fields: [forkedPasteId], references: [id])

  // foreign relations
  pasteForks Paste[]         @relation("forked_pastes")
  userLikes  UserPasteLike[]
  revisions  PasteRev[]

  @@map("pastes")
}

model PasteRev {
  id        Int      @default(autoincrement())
  pasteId   String   @map("paste_id")
  createdAt DateTime @default(now()) @map("created_at")
  content   String

  // relations
  paste Paste @relation(fields: [pasteId], references: [id])


  @@id([pasteId, id])
  @@map("paste_revs")
}

model UserPasteLike {
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  pasteId String @map("paste_id")
  paste   Paste  @relation(fields: [pasteId], references: [id])


  @@id([userId, pasteId])
  @@map("user_paste_likes")
}
